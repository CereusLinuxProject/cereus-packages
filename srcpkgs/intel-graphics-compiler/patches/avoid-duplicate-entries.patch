From 12332c1ee8e92238c919ad7c2aa36119259cb622 Mon Sep 17 00:00:00 2001
From: Artem Gindinson <artem.gindinson@intel.com>
Date: Thu, 30 Jun 2022 10:22:31 +0000
Subject: [PATCH]  Avoid duplicate entries into !opencl.kernels metadata with
 LLVM 14

The LLVM 14 version of the SPIR-V Translator (and, consequently, OpenCL Clang)
introduces the kernel entry point wrappers functionality (see commit KhronosGroup/SPIRV-LLVM-Translator@85815e7).
As IGC's SPIR-V Reader collects root nodes for kernel argument metadata into
the `!opencl.kernels` module metadata, it treats SPIR-V entry point wrappers as
separate kernels despite that they are mapped onto the same LLVM function.
Consequently, each LLVM IR kernel function recieves a "duplicate" set of kernel
argument metadata, which breaks our kernel argument analysis passes upon a
switch to LLVM 14.

Do not update the module metadata upon encountering previously seen LLVM
functions.

This fixes https://github.com/intel/intel-graphics-compiler/issues/245.
---
 IGC/AdaptorOCL/SPIRV/SPIRVReader.cpp | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/IGC/AdaptorOCL/SPIRV/SPIRVReader.cpp b/IGC/AdaptorOCL/SPIRV/SPIRVReader.cpp
index 708d96edd97..33441cf620c 100644
--- a/IGC/AdaptorOCL/SPIRV/SPIRVReader.cpp
+++ b/IGC/AdaptorOCL/SPIRV/SPIRVReader.cpp
@@ -58,6 +58,7 @@ THE SOFTWARE.
 #include <llvm/Support/ScaledNumber.h>
 #include <llvm/IR/IntrinsicInst.h>
 #include <llvm/Analysis/CFG.h>
+#include <llvm/ADT/SmallSet.h>
 #include "libSPIRV/SPIRVDebugInfoExt.h"
 #include "llvmWrapper/Transforms/Utils/Cloning.h"
 #include "common/LLVMWarningsPop.hpp"
@@ -4706,11 +4707,15 @@ SPIRVToLLVM::transKernelMetadata()
     transCapsIntoMetadata(MD);
 
     NamedMDNode *KernelMDs = M->getOrInsertNamedMetadata(SPIR_MD_KERNELS);
+    SmallSet<Function*, 16> HandledLLVMKernels;
     for (unsigned I = 0, E = BM->getNumFunctions(); I != E; ++I)
     {
         SPIRVFunction *BF = BM->getFunction(I);
         Function *F = static_cast<Function *>(getTranslatedValue(BF));
         IGC_ASSERT_MESSAGE(F, "Invalid translated function");
+        if (HandledLLVMKernels.count(F))
+            continue;
+        HandledLLVMKernels.insert(F);
 
         // __attribute__((annotate("some_user_annotation"))) are passed via
         // UserSemantic decoration on functions.
