diff --git a/src/atom.h b/src/atom.h
index 6f4eae6..baf3360 100644
--- a/src/atom.h
+++ b/src/atom.h
@@ -23,7 +23,8 @@
 	WM_CLIENT_MACHINE, \
 	_NET_ACTIVE_WINDOW, \
 	_COMPTON_SHADOW, \
-	_NET_WM_WINDOW_TYPE
+	_NET_WM_WINDOW_TYPE, \
+	_NET_CURRENT_DESKTOP
 
 #define ATOM_LIST2 \
 	_NET_WM_WINDOW_TYPE_DESKTOP, \
diff --git a/src/common.h b/src/common.h
index 239b66d..d5dda60 100644
--- a/src/common.h
+++ b/src/common.h
@@ -184,6 +184,10 @@ typedef struct session {
 	int root_height;
 	/// Width of root window.
 	int root_width;
+	/// Current desktop number of root window
+	int root_desktop_num;
+	/// Desktop switch direction
+	int root_desktop_switch_direction;
 	// Damage of root window.
 	// Damage root_damage;
 	/// X Composite overlay window.
diff --git a/src/config.c b/src/config.c
index 3225d8c..71e4fdb 100644
--- a/src/config.c
+++ b/src/config.c
@@ -504,6 +504,18 @@ void set_default_winopts(options_t *opt, win_option_mask_t *mask, bool shadow_en
 			mask[i].animation = OPEN_WINDOW_ANIMATION_INVALID;
 			opt->wintype_option[i].animation = OPEN_WINDOW_ANIMATION_INVALID;
 		}
+		if (!mask[i].animation_unmap) {
+			mask[i].animation_unmap = OPEN_WINDOW_ANIMATION_INVALID;
+			opt->wintype_option[i].animation_unmap = OPEN_WINDOW_ANIMATION_INVALID;
+		}
+		if (!mask[i].animation_workspace_in) {
+			mask[i].animation_workspace_in = OPEN_WINDOW_ANIMATION_INVALID;
+			opt->wintype_option[i].animation_workspace_in = OPEN_WINDOW_ANIMATION_INVALID;
+		}
+		if (!mask[i].animation_workspace_out) {
+			mask[i].animation_workspace_out = OPEN_WINDOW_ANIMATION_INVALID;
+			opt->wintype_option[i].animation_workspace_out = OPEN_WINDOW_ANIMATION_INVALID;
+		}
 		if (!mask[i].clip_shadow_above) {
 			mask[i].clip_shadow_above = true;
 			opt->wintype_option[i].clip_shadow_above = false;
@@ -514,6 +526,8 @@ void set_default_winopts(options_t *opt, win_option_mask_t *mask, bool shadow_en
 enum open_window_animation parse_open_window_animation(const char *src) {
 	if (strcmp(src, "none") == 0) {
 		return OPEN_WINDOW_ANIMATION_NONE;
+	}else if (strcmp(src, "auto") == 0) {
+		return OPEN_WINDOW_ANIMATION_AUTO;
 	} else if (strcmp(src, "fly-in") == 0) {
 		return OPEN_WINDOW_ANIMATION_FLYIN;
 	} else if (strcmp(src, "zoom") == 0) {
@@ -576,9 +590,14 @@ char *parse_config(options_t *opt, const char *config_file, bool *shadow_enable,
 	    .animations = false,
 	    .animation_for_open_window = OPEN_WINDOW_ANIMATION_NONE,
 	    .animation_for_transient_window = OPEN_WINDOW_ANIMATION_NONE,
+	    .animation_for_unmap_window = OPEN_WINDOW_ANIMATION_AUTO,
+	    .animation_for_workspace_switch_in = OPEN_WINDOW_ANIMATION_AUTO,
+	    .animation_for_workspace_switch_out = OPEN_WINDOW_ANIMATION_AUTO,
 	    .animation_stiffness = 200.0,
 	    .animation_window_mass = 1.0,
 	    .animation_dampening = 25,
+	    .animation_delta = 10,
+	    .animation_force_steps = false,
 	    .animation_clamping = true,
 
 	    .inactive_opacity = 1.0,
diff --git a/src/config.h b/src/config.h
index 234ccfd..c65f9b9 100644
--- a/src/config.h
+++ b/src/config.h
@@ -39,12 +39,15 @@ enum backend {
 
 enum open_window_animation {
 	OPEN_WINDOW_ANIMATION_NONE = 0,
+	OPEN_WINDOW_ANIMATION_AUTO,
 	OPEN_WINDOW_ANIMATION_FLYIN,
 	OPEN_WINDOW_ANIMATION_ZOOM,
 	OPEN_WINDOW_ANIMATION_SLIDE_UP,
 	OPEN_WINDOW_ANIMATION_SLIDE_DOWN,
 	OPEN_WINDOW_ANIMATION_SLIDE_LEFT,
 	OPEN_WINDOW_ANIMATION_SLIDE_RIGHT,
+	OPEN_WINDOW_ANIMATION_SLIDE_IN,
+	OPEN_WINDOW_ANIMATION_SLIDE_OUT,
 	OPEN_WINDOW_ANIMATION_INVALID,
 };
 
@@ -58,6 +61,9 @@ typedef struct win_option_mask {
 	bool opacity : 1;
 	bool clip_shadow_above : 1;
 	enum open_window_animation animation;
+	enum open_window_animation animation_unmap;
+	enum open_window_animation animation_workspace_in;
+	enum open_window_animation animation_workspace_out;
 } win_option_mask_t;
 
 typedef struct win_option {
@@ -70,6 +76,9 @@ typedef struct win_option {
 	double opacity;
 	bool clip_shadow_above;
 	enum open_window_animation animation;
+	enum open_window_animation animation_unmap;
+	enum open_window_animation animation_workspace_in;
+	enum open_window_animation animation_workspace_out;
 } win_option_t;
 
 enum blur_method {
@@ -189,12 +198,23 @@ typedef struct options {
 	enum open_window_animation animation_for_open_window;
 	/// Which animation to run when opening a transient window
 	enum open_window_animation animation_for_transient_window;
+	/// Which animation to run when unmapping (e.g. minimizing) a window
+	enum open_window_animation animation_for_unmap_window;
+	/// Which animation to run when switching workspace
+	/// IMPORTANT: will only work if window manager updates
+	/// _NET_CURRENT_DESKTOP before doing the hide/show of windows
+	enum open_window_animation animation_for_workspace_switch_in;
+	enum open_window_animation animation_for_workspace_switch_out;
 	/// Spring stiffness for animation
 	double animation_stiffness;
 	/// Window mass for animation
 	double animation_window_mass;
 	/// Animation dampening
 	double animation_dampening;
+	/// Animation delta. In milliseconds.
+	double animation_delta;
+	/// Whether to force animations to not miss a beat
+	bool animation_force_steps;
 	/// Whether to clamp animations
 	bool animation_clamping;
 	/// TODO: window animation blacklist
diff --git a/src/config_libconfig.c b/src/config_libconfig.c
index 181c7a0..5abae81 100644
--- a/src/config_libconfig.c
+++ b/src/config_libconfig.c
@@ -297,6 +297,30 @@ static inline void parse_wintype_config(const config_t *cfg, const char *member_
 			o->animation = animation;
 			mask->animation = OPEN_WINDOW_ANIMATION_INVALID;
 		}
+		if (config_setting_lookup_string(setting, "animation-unmap", &sval)) {
+			enum open_window_animation animation = parse_open_window_animation(sval);
+			if (animation >= OPEN_WINDOW_ANIMATION_INVALID)
+				animation = OPEN_WINDOW_ANIMATION_NONE;
+
+			o->animation_unmap = animation;
+			mask->animation_unmap = OPEN_WINDOW_ANIMATION_INVALID;
+		}
+		if (config_setting_lookup_string(setting, "animation-workspace-in", &sval)) {
+			enum open_window_animation animation = parse_open_window_animation(sval);
+			if (animation >= OPEN_WINDOW_ANIMATION_INVALID)
+				animation = OPEN_WINDOW_ANIMATION_NONE;
+
+			o->animation_workspace_in = animation;
+			mask->animation_workspace_in = OPEN_WINDOW_ANIMATION_INVALID;
+		}
+		if (config_setting_lookup_string(setting, "animation-workspace-out", &sval)) {
+			enum open_window_animation animation = parse_open_window_animation(sval);
+			if (animation >= OPEN_WINDOW_ANIMATION_INVALID)
+				animation = OPEN_WINDOW_ANIMATION_NONE;
+
+			o->animation_workspace_out = animation;
+			mask->animation_workspace_out = OPEN_WINDOW_ANIMATION_INVALID;
+		}
 
 		double fval;
 		if (config_setting_lookup_float(setting, "opacity", &fval)) {
@@ -545,17 +569,48 @@ char *parse_config_libconfig(options_t *opt, const char *config_file, bool *shad
 	if (config_lookup_string(&cfg, "animation-for-transient-window", &sval)) {
 		enum open_window_animation animation = parse_open_window_animation(sval);
 		if (animation >= OPEN_WINDOW_ANIMATION_INVALID) {
-			log_fatal("Invalid open-window animation %s", sval);
+			log_fatal("Invalid transient-window animation %s", sval);
 			goto err;
 		}
 		opt->animation_for_transient_window = animation;
 	}
+	// --animation-for-unmap-window
+	if (config_lookup_string(&cfg, "animation-for-unmap-window", &sval)) {
+		enum open_window_animation animation = parse_open_window_animation(sval);
+		if (animation >= OPEN_WINDOW_ANIMATION_INVALID) {
+			log_fatal("Invalid unmap-window animation %s", sval);
+			goto err;
+		}
+		opt->animation_for_unmap_window = animation;
+	}
+	// --animation-for-workspace-switch-in
+	if (config_lookup_string(&cfg, "animation-for-workspace-switch-in", &sval)) {
+		enum open_window_animation animation = parse_open_window_animation(sval);
+		if (animation >= OPEN_WINDOW_ANIMATION_INVALID) {
+			log_fatal("Invalid workspace-switch-in animation %s", sval);
+			goto err;
+		}
+		opt->animation_for_workspace_switch_in = animation;
+	}
+	// --animation-for-workspace-switch-out
+	if (config_lookup_string(&cfg, "animation-for-workspace-switch-out", &sval)) {
+		enum open_window_animation animation = parse_open_window_animation(sval);
+		if (animation >= OPEN_WINDOW_ANIMATION_INVALID) {
+			log_fatal("Invalid workspace-switch-out animation %s", sval);
+			goto err;
+		}
+		opt->animation_for_workspace_switch_out = animation;
+	}
 	// --animation-stiffness
 	config_lookup_float(&cfg, "animation-stiffness", &opt->animation_stiffness);
 	// --animation-window-mass
 	config_lookup_float(&cfg, "animation-window-mass", &opt->animation_window_mass);
 	// --animation-dampening
 	config_lookup_float(&cfg, "animation-dampening", &opt->animation_dampening);
+	// --animation-delta
+	config_lookup_float(&cfg, "animation-delta", &opt->animation_delta);
+	// --animation-force-steps
+	lcfg_lookup_bool(&cfg, "animation-force-steps", &opt->animation_force_steps);
 	// --animation-clamping
 	lcfg_lookup_bool(&cfg, "animation-clamping", &opt->animation_clamping);
 	// --focus-exclude
diff --git a/src/event.c b/src/event.c
index e6052f1..beec195 100644
--- a/src/event.c
+++ b/src/event.c
@@ -449,6 +449,17 @@ static inline void ev_property_notify(session_t *ps, xcb_property_notify_event_t
 	}
 
 	if (ps->root == ev->window) {
+		// If desktop number property changes
+		if (ev->atom == ps->atoms->a_NET_CURRENT_DESKTOP) {
+			auto prop = x_get_prop(ps->c, ps->root, ps->atoms->a_NET_CURRENT_DESKTOP,
+							1L, XCB_ATOM_CARDINAL, 32);
+
+			if (prop.nitems) {
+				ps->root_desktop_switch_direction = ((int)*prop.c32) - ps->root_desktop_num;
+				ps->root_desktop_num = (int)*prop.c32;
+			}
+		}
+
 		if (ps->o.use_ewmh_active_win && ps->atoms->a_NET_ACTIVE_WINDOW == ev->atom) {
 			// to update focus
 			ps->pending_updates = true;
diff --git a/src/options.c b/src/options.c
index 36f511c..3683f0e 100644
--- a/src/options.c
+++ b/src/options.c
@@ -86,6 +86,33 @@ static void usage(const char *argv0, int ret) {
 	    "  `slide-down`, `slide-up`, `slide-left`, `slide-right`\n"
 	    "  (default: none).\n"
 	    "\n"
+	    "--animation-for-unmap-window\n"
+	    "  Which animation to run when hiding (e.g. minimize) a window.\n"
+	    "  Must be one of `auto`, `none`, `fly-in`, `zoom`,\n"
+	    "  `slide-down`, `slide-up`, `slide-left`, `slide-right`\n"
+	    "  `slide-in`, `slide-out`\n"
+	    "  (default: auto).\n"
+	    "\n"
+	    "--animation-for-workspace-switch-in\n"
+	    "  Which animation to run on switching workspace for windows\n"
+	    "  comming into view.\n"
+	    "  IMPORTANT: window manager must set _NET_CURRENT_DESKTOP\n"
+	    "  before doing the hide/show of windows\n"
+	    "  Must be one of `auto`, `none`, `fly-in`, `zoom`,\n"
+	    "  `slide-down`, `slide-up`, `slide-left`, `slide-right`\n"
+	    "  `slide-in`, `slide-out`\n"
+	    "  (default: auto).\n"
+	    "\n"
+	    "--animation-for-workspace-switch-out\n"
+	    "  Which animation to run on switching workspace for windows\n"
+	    "  going out of view.\n"
+	    "  IMPORTANT: window manager must set _NET_CURRENT_DESKTOP\n"
+	    "  before doing the hide/show of windows\n"
+	    "  Must be one of `auto`, `none`, `fly-in`, `zoom`,\n"
+	    "  `slide-down`, `slide-up`, `slide-left`, `slide-right`\n"
+	    "  `slide-in`, `slide-out`\n"
+	    "  (default: auto).\n"
+	    "\n"
 	    "--animation-stiffness\n"
 	    "  Stiffness (a.k.a. tension) parameter for animation (default: 200.0).\n"
 	    "\n"
@@ -95,6 +122,13 @@ static void usage(const char *argv0, int ret) {
 	    "--animation-window-mass\n"
 	    "  Mass parameter for animation (default: 1.0).\n"
 	    "\n"
+	    "--animation-delta\n"
+	    "  The time between steps in animation, in milliseconds. (> 0, defaults to 10).\n"
+	    "\n"
+	    "--animation-force-steps\n"
+	    "  Force animations to go step by step even if cpu usage is high \n"
+	    "  (default: false)\n"
+	    "\n"
 	    "--animation-clamping\n"
 	    "  Whether to clamp animations (default: true)\n"
 	    "\n"
diff --git a/src/picom.c b/src/picom.c
index 3467e24..18254a5 100644
--- a/src/picom.c
+++ b/src/picom.c
@@ -558,6 +558,14 @@ static void configure_root(session_t *ps) {
 	ps->root_width = r->width;
 	ps->root_height = r->height;
 
+	auto prop = x_get_prop(ps->c, ps->root, ps->atoms->a_NET_CURRENT_DESKTOP,
+					1L, XCB_ATOM_CARDINAL, 32);
+
+	ps->root_desktop_switch_direction = 0;
+	if (prop.nitems) {
+		ps->root_desktop_num = (int)*prop.c32;
+	}
+
 	rebuild_screen_reg(ps);
 	rebuild_shadow_exclude_reg(ps);
 
@@ -640,10 +648,17 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 	}
 	ps->fade_time += steps * ps->o.fade_delta;
 
-	if (ps->o.animations && !ps->animation_time)
-		ps->animation_time = now;
+	double animation_delta = 0;
+	if (ps->o.animations) {
+		if (!ps->animation_time)
+			ps->animation_time = now;
+
+		animation_delta = (double)(now - ps->animation_time) /
+			(ps->o.animation_delta*100);
 
-	double delta_secs = (double)(now - ps->animation_time) / 1000;
+		if (ps->o.animation_force_steps)
+			animation_delta = min2(animation_delta, ps->o.animation_delta/1000);
+	}
 
 	// First, let's process fading
 	win_stack_foreach_managed_safe(w, &ps->window_stack) {
@@ -653,7 +668,7 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 
 		// IMPORTANT: These window animation steps must happen before any other
 		// [pre]processing. This is because it changes the window's geometry.
-		if (ps->o.animations && 
+		if (ps->o.animations &&
 			!isnan(w->animation_progress) && w->animation_progress != 1.0 &&
 			ps->o.wintype_option[w->window_type].animation != 0 &&
 			win_is_mapped_in_x(w))
@@ -680,20 +695,20 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 				(ps->o.animation_stiffness * neg_displacement_h -
 					ps->o.animation_dampening * w->animation_velocity_h) /
 				ps->o.animation_window_mass;
-			w->animation_velocity_x += acceleration_x * delta_secs;
-			w->animation_velocity_y += acceleration_y * delta_secs;
-			w->animation_velocity_w += acceleration_w * delta_secs;
-			w->animation_velocity_h += acceleration_h * delta_secs;
+			w->animation_velocity_x += acceleration_x * animation_delta;
+			w->animation_velocity_y += acceleration_y * animation_delta;
+			w->animation_velocity_w += acceleration_w * animation_delta;
+			w->animation_velocity_h += acceleration_h * animation_delta;
 
 			// Animate window geometry
 			double new_animation_x =
-				w->animation_center_x + w->animation_velocity_x * delta_secs;
+				w->animation_center_x + w->animation_velocity_x * animation_delta;
 			double new_animation_y =
-				w->animation_center_y + w->animation_velocity_y * delta_secs;
+				w->animation_center_y + w->animation_velocity_y * animation_delta;
 			double new_animation_w =
-				w->animation_w + w->animation_velocity_w * delta_secs;
+				w->animation_w + w->animation_velocity_w * animation_delta;
 			double new_animation_h =
-				w->animation_h + w->animation_velocity_h * delta_secs;
+				w->animation_h + w->animation_velocity_h * animation_delta;
 
 			// Negative new width/height causes segfault and it can happen
 			// when clamping disabled and shading a window
@@ -775,7 +790,9 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 				pixman_region32_init_rect(&w->bounding_shape, 0, 0,
 				                          (uint)w->widthb, (uint)w->heightb);
 
-				win_clear_flags(w, WIN_FLAGS_PIXMAP_STALE);
+				if (w->state != WSTATE_DESTROYING)
+					win_clear_flags(w, WIN_FLAGS_PIXMAP_STALE);
+
 				win_process_image_flags(ps, w);
 			}
 			// Mark new window region with damage
@@ -794,6 +811,27 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 				w->animation_velocity_h = 0.0;
 			}
 
+			if (!ps->root_desktop_switch_direction) {
+				if (w->state == WSTATE_UNMAPPING || w->state == WSTATE_DESTROYING) {
+					steps = 0;
+					double new_opacity = clamp(
+									w->opacity_target_old-w->animation_progress,
+									w->opacity_target, 1);
+
+					if (new_opacity < w->opacity)
+						w->opacity = new_opacity;
+
+				} else if (w->state == WSTATE_MAPPING) {
+					steps = 0;
+					double new_opacity = clamp(
+										w->animation_progress,
+										0.0, w->opacity_target);
+
+					if (new_opacity > w->opacity)
+						w->opacity = new_opacity;
+				}
+			}
+
 			*animation_running = true;
 		}
 
@@ -838,7 +876,7 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 		}
 	}
 
-	if (animation_running)
+	if (*animation_running)
 		ps->animation_time = now;
 
 	// Opacity will not change, from now on.
@@ -867,7 +905,10 @@ paint_preprocess(session_t *ps, bool *fade_running, bool *animation_running) {
 		if (w->state == WSTATE_UNMAPPED ||
 		    unlikely(w->base.id == ps->debug_window ||
 		             w->client_win == ps->debug_window)) {
-			to_paint = false;
+
+			if (!*fade_running || w->opacity == w->opacity_target)
+				to_paint = false;
+
 		} else if (!w->ever_damaged && w->state != WSTATE_UNMAPPING &&
 		           w->state != WSTATE_DESTROYING) {
 			// Unmapping clears w->ever_damaged, but the fact that the window
@@ -1652,6 +1693,7 @@ static void draw_callback_impl(EV_P_ session_t *ps, int revents attr_unused) {
 	}
 	if (!animation_running) {
 		ps->animation_time = 0L;
+		ps->root_desktop_switch_direction = 0;
 	}
 
 	// TODO(yshui) Investigate how big the X critical section needs to be. There are
diff --git a/src/win.c b/src/win.c
index 5ce9845..0678949 100644
--- a/src/win.c
+++ b/src/win.c
@@ -442,16 +442,23 @@ static void win_update_properties(session_t *ps, struct managed_win *w) {
 static void init_animation(session_t *ps, struct managed_win *w) {
 	enum open_window_animation animation = ps->o.animation_for_open_window;
 
-	if (w->window_type != WINTYPE_TOOLTIP &&
-		wid_has_prop(ps, w->client_win, ps->atoms->aWM_TRANSIENT_FOR))
-	{
+	w->animation_transient = wid_has_prop(ps, w->client_win, ps->atoms->aWM_TRANSIENT_FOR);
+
+	if (w->window_type != WINTYPE_TOOLTIP && w->animation_transient)
 		animation = ps->o.animation_for_transient_window;
-	}
 
 	if (ps->o.wintype_option[w->window_type].animation < OPEN_WINDOW_ANIMATION_INVALID)
 		animation = ps->o.wintype_option[w->window_type].animation;
 
+	if (ps->root_desktop_switch_direction != 0) {
+		if (ps->o.animation_for_workspace_switch_in == OPEN_WINDOW_ANIMATION_AUTO)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_IN;
+		else
+			animation = ps->o.animation_for_workspace_switch_in;
+	}
+
 	switch (animation) {
+	case OPEN_WINDOW_ANIMATION_AUTO:
 	case OPEN_WINDOW_ANIMATION_NONE: { // No animation
 		w->animation_center_x = w->pending_g.x + w->pending_g.width * 0.5;
 		w->animation_center_y = w->pending_g.y + w->pending_g.height * 0.5;
@@ -507,6 +514,150 @@ static void init_animation(session_t *ps, struct managed_win *w) {
 		w->animation_h = w->pending_g.height;
 		break;
 	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_IN: {
+		w->animation_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_center_y = w->pending_g.y + w->pending_g.height * 0.5 -
+			ps->root_height *
+				((ps->root_desktop_switch_direction < 0 &&
+				 ps->root_desktop_switch_direction >= -1) ||
+				ps->root_desktop_switch_direction > 1?1:-1);
+		w->animation_w = w->pending_g.width;
+		w->animation_h = w->pending_g.height;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_OUT: {
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height * 0.5 -
+			ps->root_height *
+				((ps->root_desktop_switch_direction < 0 &&
+				 ps->root_desktop_switch_direction >= -1) ||
+				ps->root_desktop_switch_direction > 1?-1:1);
+		w->animation_dest_w = w->pending_g.width;
+		w->animation_dest_h = w->pending_g.height;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_INVALID: assert(false); break;
+	}
+}
+
+static void init_animation_unmap(session_t *ps, struct managed_win *w) {
+	enum open_window_animation animation;
+
+	if (ps->o.animation_for_unmap_window == OPEN_WINDOW_ANIMATION_AUTO) {
+		animation = ps->o.animation_for_open_window;
+
+		if (w->window_type != WINTYPE_TOOLTIP && w->animation_transient)
+			animation = ps->o.animation_for_transient_window;
+
+		if (ps->o.wintype_option[w->window_type].animation < OPEN_WINDOW_ANIMATION_INVALID)
+			animation = ps->o.wintype_option[w->window_type].animation;
+
+		if (animation == OPEN_WINDOW_ANIMATION_SLIDE_UP)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_DOWN;
+		else if (animation == OPEN_WINDOW_ANIMATION_SLIDE_DOWN)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_UP;
+		else if (animation == OPEN_WINDOW_ANIMATION_SLIDE_LEFT)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_RIGHT;
+		else if (animation == OPEN_WINDOW_ANIMATION_SLIDE_RIGHT)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_LEFT;
+		else if (animation == OPEN_WINDOW_ANIMATION_SLIDE_IN)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_OUT;
+		else if (animation == OPEN_WINDOW_ANIMATION_SLIDE_OUT)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_IN;
+
+	} else {
+		animation = ps->o.animation_for_unmap_window;
+
+		if (ps->o.wintype_option[w->window_type].animation_unmap < OPEN_WINDOW_ANIMATION_INVALID)
+			animation = ps->o.wintype_option[w->window_type].animation_unmap;
+	}
+
+	if (ps->root_desktop_switch_direction != 0) {
+		if (ps->o.animation_for_workspace_switch_out == OPEN_WINDOW_ANIMATION_AUTO)
+			animation = OPEN_WINDOW_ANIMATION_SLIDE_OUT;
+		else
+			animation = ps->o.animation_for_workspace_switch_out;
+	}
+
+	switch (animation) {
+	case OPEN_WINDOW_ANIMATION_AUTO:
+	case OPEN_WINDOW_ANIMATION_NONE: { // No animation
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height * 0.5;
+		w->animation_dest_w = w->pending_g.width;
+		w->animation_dest_h = w->pending_g.height;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_FLYIN: { // Fly-out from a random point outside the screen
+		// Compute random point off screen
+		double angle = 2 * M_PI * ((double)rand() / RAND_MAX);
+		const double radius =
+		    sqrt(ps->root_width * ps->root_width + ps->root_height * ps->root_height);
+
+		// Set animation
+		w->animation_dest_center_x = ps->root_width * 0.5 + radius * cos(angle);
+		w->animation_dest_center_y = ps->root_height * 0.5 + radius * sin(angle);
+		w->animation_dest_w = 0;
+		w->animation_dest_h = 0;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_ZOOM: { // Zoom-out the image, without changing its location
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height * 0.5;
+		w->animation_dest_w = 0;
+		w->animation_dest_h = 0;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_UP: { // Slide up the image, without changing its location
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_dest_center_y = w->pending_g.y;
+		w->animation_dest_w = w->pending_g.width;
+		w->animation_dest_h = 0;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_DOWN: { // Slide down the image, without changing its location
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height;
+		w->animation_dest_w = w->pending_g.width;
+		w->animation_dest_h = 0;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_LEFT: { // Slide left the image, without changing its location
+		w->animation_dest_center_x = w->pending_g.x;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height * 0.5;
+		w->animation_dest_w = 0;
+		w->animation_dest_h = w->pending_g.height;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_RIGHT: { // Slide right the image, without changing its location
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height * 0.5;
+		w->animation_dest_w = 0;
+		w->animation_dest_h = w->pending_g.height;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_IN: {
+		w->animation_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_center_y = w->pending_g.y + w->pending_g.height * 0.5 -
+			ps->root_height *
+				((ps->root_desktop_switch_direction < 0 &&
+				 ps->root_desktop_switch_direction >= -1) ||
+				ps->root_desktop_switch_direction > 1?1:-1);
+		w->animation_w = w->pending_g.width;
+		w->animation_h = w->pending_g.height;
+		break;
+	}
+	case OPEN_WINDOW_ANIMATION_SLIDE_OUT: {
+		w->animation_dest_center_x = w->pending_g.x + w->pending_g.width * 0.5;
+		w->animation_dest_center_y = w->pending_g.y + w->pending_g.height * 0.5 -
+			ps->root_height *
+				((ps->root_desktop_switch_direction < 0 &&
+				 ps->root_desktop_switch_direction >= -1) ||
+				ps->root_desktop_switch_direction > 1?-1:1);
+		w->animation_dest_w = w->pending_g.width;
+		w->animation_dest_h = w->pending_g.height;
+		break;
+	}
 	case OPEN_WINDOW_ANIMATION_INVALID: assert(false); break;
 	}
 }
@@ -925,6 +1076,9 @@ double win_calc_opacity_target(session_t *ps, const struct managed_win *w) {
 		return 0;
 	}
 	if (w->state == WSTATE_UNMAPPING || w->state == WSTATE_DESTROYING) {
+		if (ps->root_desktop_switch_direction)
+			return w->opacity;
+
 		return 0;
 	}
 	// Try obeying opacity property and window type opacity firstly
@@ -1316,7 +1470,9 @@ void win_on_win_size_change(session_t *ps, struct managed_win *w) {
 	       w->state != WSTATE_UNMAPPING);
 
 	// Invalidate the shadow we built
-	win_set_flags(w, WIN_FLAGS_IMAGES_STALE);
+	if (w->state != WSTATE_DESTROYING)
+		win_set_flags(w, WIN_FLAGS_IMAGES_STALE);
+
 	ps->pending_updates = true;
 	free_paint(ps, &w->shadow_paint);
 }
@@ -2446,6 +2602,32 @@ void unmap_win_start(session_t *ps, struct managed_win *w) {
 	w->opacity_target_old = fmax(w->opacity_target, w->opacity_target_old);
 	w->opacity_target = win_calc_opacity_target(ps, w);
 
+	if (ps->o.animations &&
+		ps->o.animation_for_unmap_window != OPEN_WINDOW_ANIMATION_NONE &&
+		ps->o.wintype_option[w->window_type].animation != 0) 
+	{
+		init_animation_unmap(ps, w);
+
+		double x_dist = w->animation_dest_center_x - w->animation_center_x;
+		double y_dist = w->animation_dest_center_y - w->animation_center_y;
+		double w_dist = w->animation_dest_w - w->animation_w;
+		double h_dist = w->animation_dest_h - w->animation_h;
+		w->animation_inv_og_distance =
+			1.0 / sqrt(x_dist * x_dist + y_dist * y_dist +
+						w_dist * w_dist + h_dist * h_dist);
+
+		if (isinf(w->animation_inv_og_distance))
+			w->animation_inv_og_distance = 0;
+
+		w->animation_progress = 0.0;
+
+		if (w->old_win_image) {
+			ps->backend_data->ops->release_image(ps->backend_data,
+												w->old_win_image);
+			w->old_win_image = NULL;
+		}
+	}
+
 #ifdef CONFIG_DBUS
 	// Send D-Bus signal
 	if (ps->o.dbus) {
@@ -2473,6 +2655,7 @@ bool win_check_fade_finished(session_t *ps, struct managed_win *w) {
 		assert(w->opacity_target == w->opacity);
 		return false;
 	}
+
 	if (w->opacity == w->opacity_target) {
 		switch (w->state) {
 		case WSTATE_UNMAPPING: unmap_win_finish(ps, w); return false;
@@ -2497,6 +2680,15 @@ bool win_skip_fading(session_t *ps, struct managed_win *w) {
 	}
 	log_debug("Skipping fading process of window %#010x (%s)", w->base.id, w->name);
 	w->opacity = w->opacity_target;
+
+	if (w->animation_progress < 1) {
+		w->animation_progress = 1;
+		w->g.x = w->pending_g.x;
+		w->g.y = w->pending_g.y;
+		w->g.width = w->pending_g.width;
+		w->g.height = w->pending_g.height;
+	}
+
 	return win_check_fade_finished(ps, w);
 }
 
@@ -2919,5 +3111,6 @@ win_stack_find_next_managed(const session_t *ps, const struct list_node *i) {
 /// Return whether this window is mapped on the X server side
 bool win_is_mapped_in_x(const struct managed_win *w) {
 	return w->state == WSTATE_MAPPING || w->state == WSTATE_FADING ||
-	       w->state == WSTATE_MAPPED || (w->flags & WIN_FLAGS_MAPPED);
+	       w->state == WSTATE_MAPPED || w->state == WSTATE_UNMAPPING ||
+	       w->state == WSTATE_DESTROYING || (w->flags & WIN_FLAGS_MAPPED);
 }
diff --git a/src/win.h b/src/win.h
index 432ff66..86504ab 100644
--- a/src/win.h
+++ b/src/win.h
@@ -171,6 +171,8 @@ struct managed_win {
 	bool unredir_if_possible_excluded;
 	/// Whether this window is in open/close state.
 	bool in_openclose;
+	/// Whether this window was transient when animated on open
+	bool animation_transient;
 	/// Current position and destination, for animation
 	double animation_center_x,      animation_center_y;
 	double animation_dest_center_x, animation_dest_center_y;
